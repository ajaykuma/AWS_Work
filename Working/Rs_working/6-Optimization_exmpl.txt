--to update statistics
The ANALYZE operation updates the statistical metadata that the query planner uses to choose optimal plans.

>analyze listing

--Amazon Redshift monitors changes to your workload and automatically updates statistics 
in the background. In addition, the COPY command performs an analysis automatically 
when it loads data into an empty table.
To turn off automatic analyze, set the auto_analyze parameter to false, by modifying 
cluster's paramter group. (disabled for default parameter group)

--To view details about the number of rows that have been inserted or deleted since the last ANALYZE
select * from PG_STATISTIC_INDICATOR;

--check if any node failure/disk failure
============

WLM
Manual-we define queues and assign percentage of resources for each queue
Auto - we define queues, system automatically assigns resources (priority-low,high,very high)


WLM > create parameter group > give a name
--check if default parameters show up..

Modify workload queues >

--shows default queues
--Add queue <say 3 times to create 3 different queues>
1st:
BI_Wrk
Concurrency scaling mode: auto
Query priority: Highest
User roles: %tableau%
User groups: %tableau%
Add rule form template/custom rule:
rulimp1,scan row count(rows), >, 30000, Actions: log

2nd: Batch_Wrk
Concurrency scaling mode: auto
Query priority: High
User roles: None
User groups: None
Add rule form template/custom rule:
rulimp2,....scan row count(rows), >, 10000, Actions: log
rulimp3,.....rows joined > 1000, Action : change priority > highest

Default queue> lowest..

--to apply new paramter group for cluster > click on cluster > go to properties 
>edit parameter group > let changes be applied and if required reboot.

from editor> (unselect limit 100 rows)
select * from listing order by sellerid desc;

from query monitoring get the query id

--look into STL_WLM_QUERY
Contains a record of each attempted execution of a query in a service class handled by WLM.
select * from STL_WLM_QUERY where query = '203245';

--to extend create a dedicated user and group, create schema, grant permissions and then create queue for this usergroup

create group testgrp;

select* from pg_group;

create user testusr in group testgrp password 'Abcd$1234';

create schema testschema_forusr;

alter schema testschema_forusr owner to "testusr";

SELECT usename, groname 
FROM pg_user, pg_group
WHERE (pg_user.usesysid = ANY(pg_group.grolist))
AND pg_group.groname in (SELECT DISTINCT pg_group.groname from pg_group);






















