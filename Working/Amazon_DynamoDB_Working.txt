Amazon DynamoDB
----------------------------------
Services> DynamoDB > Select region 
                   	> create table
                          table name : usersTest
                          primary key : id (string)
                          Table settings : default
                           	create
Once table is created.

Lets add an item
Items > --create item (change the view to text view)
          {"id":"12345","firstname":"bill","lastname":"johnson"}
        --save

[we can check/use lambda to put data into dynamodb table]

--from overview tab get 
  Amazon Resource Name (ARN)	arn:aws:dynamodb:us-east-1:789922351583:table/UsersTest
(this can be added in role, to provide permissions for a table specific)

--create role for lambda to write data/have access to dynamodb (for service to service access)
  role name: lamfordynamodb (using AWSLambdaBasicExecutionRole)
--once role is created, we would want to add one more policy
  choose your role
  add inline policy
  service : dynamodb
  actions : All Dynamodb Action (for best practices ,give only required permissions)
            we need get and put permissions for now.
            click on 'add actions' and search for 'GetItem' & 'PutItem'
  resources : add arn (add arn which we copied earlier)
  review policy > create policy by giving a name 'DynamoReadWriteAccess'

--now we can create lambda function

services>lambda
--create function
name: getUserData
runtime: default
role: enter your role
-----create function
designer> shows options to add trigger (lambda functions can run as response to various events)

--
'use strict'
const AWS = require('aws-sdk');

AWS.config.update({region: "us-east-1"});

exports.handler = function (event, context, callback){
    const ddb = new AWS.DynamoDB({ apiVersion: "2012-10-08"});

    const params = {
        TableName: "usersTest",
        Key: {
          id: {
	    S: "12345"
          }
        }
    }

    ddb.getItem(params, (err, data) => {
       if(err) {
          console.log(err);
       }
       console.log(data);
       })
}
--

we can test the function by configuring test event.
event name: getUserData 
<leave it as it is> create
--test it

similarly we can create lambda function for putUserData and test it
--
'use strict'
const AWS = require('aws-sdk');

AWS.config.update({region: "us-east-1"});

exports.handler = async(event, context) => {
    const ddb = new AWS.DynamoDB({ apiVersion: "2012-10-08"});
    const documentClient = new AWS.DynamoDB.DocumentClient({ region: "us-east-1"});

    const params = {
        TableName: "usersTest",
        Item : {
          id: "123456",
	  firstname: "John",
          lastname: "lenon"
          }
        }
    
    try {
	const data = await documentClient.put(params).promise();
        console.log(data);
       } catch (err) {
	console.log(err);
       }
}

Then check if you have data in dynamoDB table..

===========



           
